{
  "openapi": "3.0.0",
  "info": {
    "title": "Insights Results Aggregator",
    "version": "2.0.0",
    "description": "Aggregation service for the results of running Insights rules.",
    "contact": {}
  },
  "paths": {
    "/openapi.json": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "openapi": {
                      "type": "string"
                    },
                    "info": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "version": {
                          "type": "string"
                        }
                      }
                    },
                    "paths": {
                      "description": "Available paths and their descriptions.",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "A JSON containing the OpenAPI specification for this service."
          }
        },
        "operationId": "getOpenApi",
        "summary": "Returns the OpenAPI specification JSON.",
        "description": "The OpenAPI specification of this REST API service that is represented in formatted and human-readable JSON is available under this endpoint."
      }
    },
    "/metrics": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "text/plain": {}
            },
            "description": "Default response containing all metrics in semi-structured text format"
          }
        },
        "operationId": "getMetrics",
        "summary": "Read all metrics exposed by this service",
        "description": "Set of metrics provided by insights-operator-utils library providing total number of requests counter, API endpoints response times, and counter of HTTP status code responses. Additionally it is possible to consume all metrics provided by Go runtime. These metrics start with go_ and process_ prefixes."
      }
    },
    "/cluster/{clusterId}/reports": {
      "get": {
        "tags": [
          "prod"
        ],
        "parameters": [
          {
            "example": "34c3ecc5-624a-49a5-bab8-4fdc5e51a266",
            "name": "clusterId",
            "description": "ID of the cluster which must conform to UUID format.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "osd_eligible",
            "description": "If true, only OSD eligible rules will be sent.",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false
          },
          {
            "name": "get_disabled",
            "description": "If true, disabled rules will be sent too.",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reportResponse"
                }
              }
            },
            "description": "Latest available report for the given organization and cluster combination. Returns rules and their descriptions that were hit by the cluster."
          }
        },
        "deprecated": false,
        "operationId": "getReportForCluster",
        "summary": "Returns the latest insights report for a cluster.",
        "description": "The report is specified by the cluster ID from params and information about the org_id and user_id is taken from the token. The latest report available for the given combination will be returned."
      }
    },
    "/content": {
      "get": {
        "tags": [
          "prod"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "summary": {
                            "type": "string"
                          },
                          "reason": {
                            "type": "string"
                          },
                          "resolution": {
                            "type": "string"
                          },
                          "more_info": {
                            "type": "string"
                          },
                          "plugin": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "node_id": {
                                "type": "string"
                              },
                              "product_code": {
                                "type": "string"
                              },
                              "python_module": {
                                "type": "string"
                              }
                            }
                          },
                          "error_keys": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": {
                                "generic": {
                                  "type": "string"
                                },
                                "reason": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "type": "object",
                                  "properties": {
                                    "condition": {
                                      "type": "string"
                                    },
                                    "description": {
                                      "type": "string"
                                    },
                                    "impact": {
                                      "type": "integer"
                                    },
                                    "likelihood": {
                                      "type": "integer"
                                    },
                                    "publish_date": {
                                      "type": "string"
                                    },
                                    "status": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "tags": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  }
                }
              }
            },
            "description": "A JSON object with the content."
          }
        },
        "operationId": "getContent",
        "summary": "Get all static content",
        "description": "The static content is taken from the cache periodically updated from the content service"
      }
    },
    "/ack": {
      "get": {
        "operationId": "AckListEndpoint",
        "summary": "Lists acks from this account where the rule is active",
        "description": "Lists acks from this account where the rule is active. Will return empty list if this account has no acks",
        "tags": [
          "prod"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemWideRuleDisableList"
                }
              }
            },
            "description": "List of acked rules"
          }
        }
      },
      "post": {
        "operationId": "ackRuleSystemWide",
        "summary": "Acknowledges/hide the rule for given account",
        "description": "Acknowledges (and therefore hides) a rule from view in an account. If there's already an acknowledgement of this rule by this account, then return that. Othervise, a new ack is created.",
        "tags": [
          "prod"
        ],
        "requestBody": {
          "description": "Specification of rule selector (ID+error key) and a justification why rule has been disabled.",
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemWideRuleDisable"
                }
              }
            },
            "description": "Rule has been disabled already"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemWideRuleDisable"
                }
              }
            },
            "description": "Rule has been acked (disabled)"
          }
        }
      }
    },
    "/ack/{rule_id}": {
      "get": {
        "operationId": "getAckRuleSystemWide",
        "summary": "AckGetEndpoint read the acknowledgement info about disabled rule",
        "description": "AckGetEndpoint read the acknowledgement info about disabled rule",
        "tags": [
          "prod"
        ],
        "parameters": [
          {
            "name": "rule_id",
            "description": "Specification of rule selector (ID+error key) and a justification why rule has been disabled.",
            "schema": {
              "type": "string",
              "example": "some.python.module|error_key"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemWideRuleDisable"
                }
              }
            },
            "description": "Rule ack has been found, the metadata is returned in response body"
          },
          "404": {
            "description": "Rule has not been acked (disabled) previously"
          }
        }
      },
      "put": {
        "operationId": "UpdateAckRuleSystemWide",
        "summary": "Updates an acknowledgement for a rule, by rule ID.",
        "description": "Updates an acknowledgement for a rule, by rule ID. A new justification can be supplied.",
        "tags": [
          "prod"
        ],
        "parameters": [
          {
            "name": "rule_id",
            "description": "Specification of rule selector (ID+error key).",
            "schema": {
              "type": "string",
              "example": "some.python.module|error_key"
            },
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Specification of justification why rule has been disabled.",
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemWideRuleDisable"
                }
              }
            },
            "description": "Rule ack has been found and updated, the metadata is returned in response body"
          },
          "404": {
            "description": "Rule has not been acked (disabled) previously"
          }
        }
      },
      "delete": {
        "operationId": "deleteAckRuleSystemWide",
        "summary": "Deletes an acknowledgement for a rule",
        "description": "Deletes an acknowledgement for a rule, by its rule ID. If the ack existed, it is deleted and a 204 is returned. Otherwise, a 404 is returned.",
        "tags": [
          "prod"
        ],
        "parameters": [
          {
            "name": "rule_id",
            "description": "Specification of rule selector (ID+error key) and a justification why rule has been disabled.",
            "schema": {
              "type": "string",
              "example": "some.python.module|error_key"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Rule ack has been deleted"
          },
          "404": {
            "description": "Rule has not been acked (disabled) previously"
          }
        }
      }
    },
    "/rule/{ruleId}": {
      "get": {
        "tags": [
          "prod"
        ],
        "parameters": [
          {
            "name": "ruleId",
            "description": "ID of the rule which content is required",
            "schema": {
              "type": "string",
              "example": "some.python.module"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "object",
                      "properties": {
                        "summary": {
                          "type": "string"
                        },
                        "reason": {
                          "type": "string"
                        },
                        "resolution": {
                          "type": "string"
                        },
                        "more_info": {
                          "type": "string"
                        },
                        "plugin": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "node_id": {
                              "type": "string"
                            },
                            "product_code": {
                              "type": "string"
                            },
                            "python_module": {
                              "type": "string"
                            }
                          }
                        },
                        "error_keys": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "reason": {
                                "type": "string"
                              },
                              "generic": {
                                "type": "string"
                              },
                              "metadata": {
                                "type": "object",
                                "properties": {
                                  "condition": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "impact": {
                                    "type": "integer"
                                  },
                                  "likelihood": {
                                    "type": "integer"
                                  },
                                  "publish_date": {
                                    "type": "string"
                                  },
                                  "status": {
                                    "type": "string"
                                  },
                                  "tags": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "tags": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  }
                }
              }
            },
            "description": "A JSON object with the content."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Item not found in the storage"
                    }
                  }
                }
              }
            },
            "description": "Rule ID is not available"
          },
          "503": {
            "content": {
              "text/plain": {}
            },
            "description": "Content service is unavailable"
          }
        },
        "operationId": "getContentForRule",
        "summary": "Get all static content for the given ruleId",
        "description": "The static content is taken from the cache periodically updated from the content service"
      }
    },
    "/rule/{rule_selector}/clusters_detail": {
      "get": {
        "summary": "Returns a list of cluster where the given rule is active.",
        "description": "Provided a correct rule selector and a valid organization ID, this method will query the DB for all the organization's clusters being currently affected by the rule, if any.",
        "operationId": "getClustersForRecommendation",
        "parameters": [
          {
            "name": "rule_selector",
            "in": "path",
            "required": true,
            "description": "Recommendation identifier, in the plugin_name|error_key format",
            "schema": {
              "type": "string"
            },
            "example": "existing.plugin.name|ERROR_KEY"
          }
        ],
        "responses": {
          "200": {
            "description": "List of cluster data for provided rule",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "report": {
                      "type": "object",
                      "properties": {
                        "meta": {
                          "type": "object",
                          "properties": {
                            "count": {
                              "type": "integer",
                              "description": "Number of clusters affected by the received rule.",
                              "example": "1"
                            },
                            "rule_selector": {
                              "type": "string",
                              "description": "The rule selector retrieved in the URL.",
                              "example": "some.python.module|SOME_ERROR_KEY"
                            }
                          },
                          "data": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "cluster": {
                                  "type": "string",
                                  "minLength": 36,
                                  "maxLength": 36,
                                  "format": "uuid"
                                }
                              }
                            }
                          }
                        }
                      },
                      "status": {
                        "type": "string",
                        "example": "ok"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Request body could not be parsed, so the query is not processed"
            },
            "404": {
              "description": "Resource not found, usually caused when some rule selector, organization or user doesn't exist"
            },
            "500": {
              "description": "Internal server error, should only be returned if unexpected error happened when querying from the DB"
            }
          },
          "tags": [
            "rule",
            "prod"
          ]
        }
      }
    },
    "/rule": {
      "get": {
        "operationId": "getRecommendations",
        "summary": "Returns a list recommendations and the number of clusters they're currently impacting.",
        "description": "The affected clusters are based on the requester's organization. If the AMS API is available, the clusters are pulled from there, otherwise we retrieve the clusters from our database.",
        "tags": [
          "prod"
        ],
        "parameters": [
          {
            "name": "impacting",
            "description": "If param is missing, endpoint will return all available rules including those that don't hit any clusters at the moment. If set to true, only returns impacting rules. If false, only returns those that aren't impacting.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recommendationListResponse"
                }
              }
            },
            "description": "Returns a list recommendations and the number of clusters they're currently impacting. Default behaviour is to return only the rules that affect atleast one cluster. This can be changed by passing impacting parameter"
          }
        }
      }
    },
    "/rating": {
      "post": {
        "tags": [
          "prod"
        ],
        "requestBody": {
          "description": "A JSON object with the current rule and its rating.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ratingSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ratingSchema"
                }
              }
            },
            "description": "The current rating value for the rule"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ratingSchema"
                }
              }
            },
            "description": "The current rating value for the rule"
          },
          "400": {
            "description": "Invalid request, usually caused when some rule identifier doesn't exist"
          }
        },
        "deprecated": false,
        "operationId": "sendRating",
        "summary": "Send the new rating for a given rule",
        "description": "Return the new rating. Any previous rating for this rule by this user is amended to the current value. This does not attempt to delete a rating by this user of thus rule if the rating is zero."
      }
    }
  },
  "components": {
    "schemas": {
      "reportData": {
        "description": "/clusters/{clusterId}/report returns an array of ruleHit instances",
        "type": "object",
        "properties": {
          "rule_id": {
            "description": "ID of a rule.",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "The title of the rule, a short description.",
            "type": "string"
          },
          "details": {
            "description": "Details of the rule - templates rendered on frontend.",
            "type": "string"
          },
          "reason": {
            "description": "Reason for the issue, giving the user more accurate description of the cause.",
            "type": "string"
          },
          "resolution": {
            "description": "Resolution steps of the issue, possibly linking to a resolution article in the knowledge base.",
            "type": "string"
          },
          "total_risk": {
            "description": "Total risk - calculated from rule impact and likelihood.",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "type": "integer"
          },
          "risk_of_change": {
            "description": "Risk of change - values paired with corresponding UI elements. 0 returned when not defined, therefore to hide the UI.",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "type": "integer"
          },
          "disabled": {
            "description": "If this rule result disabled or not. This field can be used in the UI to show only specific set of rules results.",
            "type": "boolean"
          },
          "disable_feedback": {
            "type": "string"
          },
          "disabled_at": {
            "type": "string"
          },
          "internal": {
            "type": "boolean"
          },
          "user_vote": {
            "format": "int32",
            "description": "User vote - value of user voting. -1 is dislike vote, 0 is no vote, 1 is like vote.",
            "enum": [
              "-1",
              "0",
              "1"
            ],
            "type": "integer"
          },
          "extra_data": {
            "description": "Used as templating data for other content (details, resolution, etc.), has varying structure depending on the rules in the report.",
            "type": "object"
          },
          "tags": {
            "description": "List of tags that the rule contains, forming rule groups.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "rule_id": "ccx_rules_ocm.tutorial_rule.report",
          "created_at": "2020-04-08T00:42:00Z",
          "description": "Introducing Insights for Red Hat OpenShift Container Platform",
          "details": "Red Hat Insights for OpenShift is a proactive management solution. It provides ongoing infrastructure analyses of your Red Hat OpenShift Container Platform 4.2 and later installations. Red Hat Insights helps you identify, prioritize, and resolve risks to security, performance, availability, and stability before they become urgent issues.\nRed Hat Insights for OpenShift uses the Remote Health Monitoring feature of OpenShift 4. The health checks are created by Red Hat subject matter experts and assessed according to severity and impact.\nThis is an example  recommendation that you can safely ignore. To disable it, click  the triple-dot menu button next to the header, and select Disable.\n\n[Knowledgebase Article](https://access.redhat.com/search/#/knowledgebase)\n\n",
          "reason": "",
          "resolution": "",
          "total_risk": 1,
          "risk_of_change": 0,
          "disabled": false,
          "disable_feedback": "",
          "disabled_at": "",
          "internal": false,
          "user_vote": 0,
          "extra_data": {
            "error_key": "TUTORIAL_ERROR",
            "type": "rule"
          },
          "tags": [
            "openshift",
            "service_availability"
          ]
        }
      },
      "reportMeta": {
        "description": "",
        "type": "object",
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "last_checked_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "example": {
          "count": 9,
          "last_checked_at": "2020-12-08T09:45:23Z"
        }
      },
      "reportResponse": {
        "description": "Response data type for GET /clusters/{clusterId}/report endpoint",
        "type": "object",
        "properties": {
          "report": {
            "$ref": "#/components/schemas/report",
            "description": ""
          },
          "status": {
            "description": "",
            "type": "string"
          }
        }
      },
      "recommendationList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "rule_id": {
              "type": "string",
              "description": "The rule ID in the | format.",
              "example": "rule.module|ERROR_KEY"
            },
            "description": {
              "description": "The title of the rule, a short description.",
              "type": "string"
            },
            "generic": {
              "description": "More specific, cluster-independent description of the rule",
              "type": "string"
            },
            "publish_date": {
              "description": "The date the rule was published. 'Added at' field in UI",
              "format": "date-time",
              "type": "string"
            },
            "total_risk": {
              "description": "Total risk - calculated from rule impact and likelihood.",
              "enum": [
                0,
                1,
                2,
                3,
                4
              ],
              "type": "integer"
            },
            "impact": {
              "type": "integer",
              "description": "How much of an impact this rule has on a cluster.",
              "enum": [
                0,
                1,
                2,
                3,
                4
              ]
            },
            "likelihood": {
              "type": "integer",
              "description": "How likely is this rule to hit.",
              "enum": [
                0,
                1,
                2,
                3,
                4
              ]
            },
            "tags": {
              "description": "List of tags that the rule contains",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "rule_status": {
              "description": "Whether the rule has been disabled/acked or not.",
              "type": "string",
              "example": "disabled"
            },
            "risk_of_change": {
              "description": "Risk of change - values paired with corresponding UI elements. 0 returned when not defined, therefore to hide the UI.",
              "enum": [
                0,
                1,
                2,
                3,
                4
              ],
              "type": "integer"
            },
            "impacted_clusters_count": {
              "type": "int",
              "description": "The number of clusters impacted by this rule.",
              "example": 42
            }
          },
          "example": {
            "rule_id": "ccx_rules_ocp.external.bug_rules.bug_1821905|BUGZILLA_BUG_1821905",
            "description": "Introducing Insights for Red Hat OpenShift Container Platform",
            "publish_date": "2020-04-08T00:42:00Z",
            "total_risk": 3,
            "impact": 2,
            "likelihood": 4,
            "tags": [
              "openshift",
              "service_availability"
            ],
            "risk_of_change": 0,
            "rule_status": "enabled",
            "impacted_clusters_count": 42
          }
        }
      },
      "recommendationListResponse": {
        "description": "Response data type for GET /rule endpoint",
        "type": "object",
        "properties": {
          "recommendations": {
            "$ref": "#/components/schemas/recommendationList",
            "description": "List of recommendations and number of impacting clusters"
          },
          "status": {
            "description": "Request response status",
            "type": "string"
          }
        }
      },
      "systemWideRuleDisableList": {
        "description": "List of all system-wide disabled rules",
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "rule": {
                  "type": "string"
                },
                "justification": {
                  "type": "string"
                },
                "created_by": {
                  "type": "string"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        }
      },
      "systemWideRuleDisable": {
        "description": "An information about rule that has been disabled for whole account",
        "type": "object",
        "properties": {
          "status": {
            "description": "Information about the operation status",
            "type": "string",
            "example": "ok"
          },
          "rule": {
            "type": "string",
            "description": "Rule selector: rule ID + error key",
            "example": "foo.bar|baz"
          },
          "justification": {
            "type": "string",
            "description": "Justification (message) provided by user",
            "example": "I don't like this rule!"
          },
          "created_by": {
            "type": "string",
            "description": "ID of user (account)",
            "example": "42"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the rule has been acked/disabled",
            "example": "2021-09-05T16:29:33+02:00"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the rule justification has been changed (can be empty)",
            "example": "2021-09-05T16:29:33+02:00"
          }
        }
      },
      "report": {
        "description": "",
        "type": "object",
        "properties": {
          "data": {
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reportData"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/reportMeta",
            "description": ""
          }
        }
      },
      "ratingSchema": {
        "description": "",
        "type": "object",
        "properties": {
          "rule": {
            "type": "string"
          },
          "rating": {
            "type": "integer"
          }
        }
      }
    }
  }
}
